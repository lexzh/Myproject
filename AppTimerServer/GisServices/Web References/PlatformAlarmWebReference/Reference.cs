//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.34014 版自动生成。
// 
#pragma warning disable 1591

namespace GisServices.PlatformAlarmWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AlarmServiceSoap", Namespace="http://tempuri.org/")]
    public partial class AlarmService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ChackRoadSegAlarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChackRoadSegAlarmCustomOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSeparateAndStickyCarsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCarsOnRoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsInAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback SegAlarmTestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AlarmService() {
            this.Url = global::GisServices.Properties.Settings.Default.GpsGisServices_PlatformAlarmWebReference_AlarmService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ChackRoadSegAlarmCompletedEventHandler ChackRoadSegAlarmCompleted;
        
        /// <remarks/>
        public event ChackRoadSegAlarmCustomCompletedEventHandler ChackRoadSegAlarmCustomCompleted;
        
        /// <remarks/>
        public event GetSeparateAndStickyCarsCompletedEventHandler GetSeparateAndStickyCarsCompleted;
        
        /// <remarks/>
        public event IsCarsOnRoadCompletedEventHandler IsCarsOnRoadCompleted;
        
        /// <remarks/>
        public event IsInAreaCompletedEventHandler IsInAreaCompleted;
        
        /// <remarks/>
        public event SegAlarmTestCompletedEventHandler SegAlarmTestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChackRoadSegAlarm", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChackRoadSegAlarm(string inputXML) {
            object[] results = this.Invoke("ChackRoadSegAlarm", new object[] {
                        inputXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChackRoadSegAlarmAsync(string inputXML) {
            this.ChackRoadSegAlarmAsync(inputXML, null);
        }
        
        /// <remarks/>
        public void ChackRoadSegAlarmAsync(string inputXML, object userState) {
            if ((this.ChackRoadSegAlarmOperationCompleted == null)) {
                this.ChackRoadSegAlarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChackRoadSegAlarmOperationCompleted);
            }
            this.InvokeAsync("ChackRoadSegAlarm", new object[] {
                        inputXML}, this.ChackRoadSegAlarmOperationCompleted, userState);
        }
        
        private void OnChackRoadSegAlarmOperationCompleted(object arg) {
            if ((this.ChackRoadSegAlarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChackRoadSegAlarmCompleted(this, new ChackRoadSegAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChackRoadSegAlarmCustom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChackRoadSegAlarmCustom(string inputXml) {
            object[] results = this.Invoke("ChackRoadSegAlarmCustom", new object[] {
                        inputXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChackRoadSegAlarmCustomAsync(string inputXml) {
            this.ChackRoadSegAlarmCustomAsync(inputXml, null);
        }
        
        /// <remarks/>
        public void ChackRoadSegAlarmCustomAsync(string inputXml, object userState) {
            if ((this.ChackRoadSegAlarmCustomOperationCompleted == null)) {
                this.ChackRoadSegAlarmCustomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChackRoadSegAlarmCustomOperationCompleted);
            }
            this.InvokeAsync("ChackRoadSegAlarmCustom", new object[] {
                        inputXml}, this.ChackRoadSegAlarmCustomOperationCompleted, userState);
        }
        
        private void OnChackRoadSegAlarmCustomOperationCompleted(object arg) {
            if ((this.ChackRoadSegAlarmCustomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChackRoadSegAlarmCustomCompleted(this, new ChackRoadSegAlarmCustomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSeparateAndStickyCars", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSeparateAndStickyCars(string inputXml) {
            object[] results = this.Invoke("GetSeparateAndStickyCars", new object[] {
                        inputXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSeparateAndStickyCarsAsync(string inputXml) {
            this.GetSeparateAndStickyCarsAsync(inputXml, null);
        }
        
        /// <remarks/>
        public void GetSeparateAndStickyCarsAsync(string inputXml, object userState) {
            if ((this.GetSeparateAndStickyCarsOperationCompleted == null)) {
                this.GetSeparateAndStickyCarsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeparateAndStickyCarsOperationCompleted);
            }
            this.InvokeAsync("GetSeparateAndStickyCars", new object[] {
                        inputXml}, this.GetSeparateAndStickyCarsOperationCompleted, userState);
        }
        
        private void OnGetSeparateAndStickyCarsOperationCompleted(object arg) {
            if ((this.GetSeparateAndStickyCarsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeparateAndStickyCarsCompleted(this, new GetSeparateAndStickyCarsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsCarsOnRoad", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsCarsOnRoad(string inputXML) {
            object[] results = this.Invoke("IsCarsOnRoad", new object[] {
                        inputXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsCarsOnRoadAsync(string inputXML) {
            this.IsCarsOnRoadAsync(inputXML, null);
        }
        
        /// <remarks/>
        public void IsCarsOnRoadAsync(string inputXML, object userState) {
            if ((this.IsCarsOnRoadOperationCompleted == null)) {
                this.IsCarsOnRoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCarsOnRoadOperationCompleted);
            }
            this.InvokeAsync("IsCarsOnRoad", new object[] {
                        inputXML}, this.IsCarsOnRoadOperationCompleted, userState);
        }
        
        private void OnIsCarsOnRoadOperationCompleted(object arg) {
            if ((this.IsCarsOnRoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCarsOnRoadCompleted(this, new IsCarsOnRoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsInArea", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsInArea(string inputXML) {
            object[] results = this.Invoke("IsInArea", new object[] {
                        inputXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsInAreaAsync(string inputXML) {
            this.IsInAreaAsync(inputXML, null);
        }
        
        /// <remarks/>
        public void IsInAreaAsync(string inputXML, object userState) {
            if ((this.IsInAreaOperationCompleted == null)) {
                this.IsInAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsInAreaOperationCompleted);
            }
            this.InvokeAsync("IsInArea", new object[] {
                        inputXML}, this.IsInAreaOperationCompleted, userState);
        }
        
        private void OnIsInAreaOperationCompleted(object arg) {
            if ((this.IsInAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsInAreaCompleted(this, new IsInAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SegAlarmTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SegAlarmTest(double lon, double lat, double speed) {
            object[] results = this.Invoke("SegAlarmTest", new object[] {
                        lon,
                        lat,
                        speed});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SegAlarmTestAsync(double lon, double lat, double speed) {
            this.SegAlarmTestAsync(lon, lat, speed, null);
        }
        
        /// <remarks/>
        public void SegAlarmTestAsync(double lon, double lat, double speed, object userState) {
            if ((this.SegAlarmTestOperationCompleted == null)) {
                this.SegAlarmTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSegAlarmTestOperationCompleted);
            }
            this.InvokeAsync("SegAlarmTest", new object[] {
                        lon,
                        lat,
                        speed}, this.SegAlarmTestOperationCompleted, userState);
        }
        
        private void OnSegAlarmTestOperationCompleted(object arg) {
            if ((this.SegAlarmTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SegAlarmTestCompleted(this, new SegAlarmTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ChackRoadSegAlarmCompletedEventHandler(object sender, ChackRoadSegAlarmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChackRoadSegAlarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChackRoadSegAlarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ChackRoadSegAlarmCustomCompletedEventHandler(object sender, ChackRoadSegAlarmCustomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChackRoadSegAlarmCustomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChackRoadSegAlarmCustomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSeparateAndStickyCarsCompletedEventHandler(object sender, GetSeparateAndStickyCarsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeparateAndStickyCarsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeparateAndStickyCarsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void IsCarsOnRoadCompletedEventHandler(object sender, IsCarsOnRoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCarsOnRoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCarsOnRoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void IsInAreaCompletedEventHandler(object sender, IsInAreaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsInAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsInAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SegAlarmTestCompletedEventHandler(object sender, SegAlarmTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SegAlarmTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SegAlarmTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591